
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000458  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00000458  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d58  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000490  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006c6  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000230  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000397  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000648  00000000  00000000  0000256f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  7a:	0c 94 2a 02 	jmp	0x454	; 0x454 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KeyPad_Init>:

void KeyPad_Init(void)
{
	// Init Input Port
	// Init Output Port
	DDRB = 0xF0;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret

0000008c <KeyPad_getKey>:
}

unsigned char KeyPad_getKey(void)
{
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char rows_value = 0;
	for(count=4; count<8; count++)
	{
		PORTB = PORTB | 0xF0;
		// Make Col = 0
		PORTB = PORTB & (~(1<<count));
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	68 2f       	mov	r22, r24
{
	unsigned char count = 0;
	unsigned char rows_value = 0;
	for(count=4; count<8; count++)
	{
		PORTB = PORTB | 0xF0;
  96:	28 b3       	in	r18, 0x18	; 24
  98:	20 6f       	ori	r18, 0xF0	; 240
  9a:	28 bb       	out	0x18, r18	; 24
		// Make Col = 0
		PORTB = PORTB & (~(1<<count));
  9c:	78 b3       	in	r23, 0x18	; 24
  9e:	9a 01       	movw	r18, r20
  a0:	08 2e       	mov	r0, r24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <KeyPad_getKey+0x1c>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <KeyPad_getKey+0x18>
  ac:	20 95       	com	r18
  ae:	27 23       	and	r18, r23
  b0:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e9 ef       	ldi	r30, 0xF9	; 249
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <KeyPad_getKey+0x2a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <KeyPad_getKey+0x30>
  bc:	00 00       	nop
		// To let Col = 0 for small time
		_delay_ms(1);
		rows_value = PINB & 0x0F;
  be:	26 b3       	in	r18, 0x16	; 22
  c0:	2f 70       	andi	r18, 0x0F	; 15
		if(rows_value != 0x0F)
  c2:	2f 30       	cpi	r18, 0x0F	; 15
  c4:	29 f0       	breq	.+10     	; 0xd0 <KeyPad_getKey+0x44>
		{
			while((PINB & 0x0F) != 0x0F);
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	8f 30       	cpi	r24, 0x0F	; 15
  cc:	e1 f7       	brne	.-8      	; 0xc6 <KeyPad_getKey+0x3a>
  ce:	06 c0       	rjmp	.+12     	; 0xdc <KeyPad_getKey+0x50>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	68 0f       	add	r22, r24
  d4:	01 96       	adiw	r24, 0x01	; 1

unsigned char KeyPad_getKey(void)
{
	unsigned char count = 0;
	unsigned char rows_value = 0;
	for(count=4; count<8; count++)
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	91 05       	cpc	r25, r1
  da:	e1 f6       	brne	.-72     	; 0x94 <KeyPad_getKey+0x8>
		{
			while((PINB & 0x0F) != 0x0F);
			break;
		}
	}
	if(count == 8)
  dc:	68 30       	cpi	r22, 0x08	; 8
  de:	09 f4       	brne	.+2      	; 0xe2 <KeyPad_getKey+0x56>
  e0:	4a c0       	rjmp	.+148    	; 0x176 <KeyPad_getKey+0xea>
	{
		return 'F';
	}
	count = count - 4;
  e2:	64 50       	subi	r22, 0x04	; 4

	switch(count)
  e4:	61 30       	cpi	r22, 0x01	; 1
  e6:	b1 f0       	breq	.+44     	; 0x114 <KeyPad_getKey+0x88>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <KeyPad_getKey+0x68>
  ea:	62 30       	cpi	r22, 0x02	; 2
  ec:	19 f1       	breq	.+70     	; 0x134 <KeyPad_getKey+0xa8>
  ee:	63 30       	cpi	r22, 0x03	; 3
  f0:	89 f1       	breq	.+98     	; 0x154 <KeyPad_getKey+0xc8>
  f2:	40 c0       	rjmp	.+128    	; 0x174 <KeyPad_getKey+0xe8>
	{
		// Col0
		case 0:
		switch(rows_value)
  f4:	2b 30       	cpi	r18, 0x0B	; 11
  f6:	51 f0       	breq	.+20     	; 0x10c <KeyPad_getKey+0x80>
  f8:	18 f4       	brcc	.+6      	; 0x100 <KeyPad_getKey+0x74>
  fa:	27 30       	cpi	r18, 0x07	; 7
  fc:	49 f0       	breq	.+18     	; 0x110 <KeyPad_getKey+0x84>
  fe:	3a c0       	rjmp	.+116    	; 0x174 <KeyPad_getKey+0xe8>
 100:	2d 30       	cpi	r18, 0x0D	; 13
 102:	d9 f1       	breq	.+118    	; 0x17a <KeyPad_getKey+0xee>
 104:	2e 30       	cpi	r18, 0x0E	; 14
 106:	b1 f5       	brne	.+108    	; 0x174 <KeyPad_getKey+0xe8>
		{
			case 0x0E:
			return '7';
 108:	87 e3       	ldi	r24, 0x37	; 55
 10a:	08 95       	ret
			break;
			case 0x0D:
			return '4';
			break;
			case 0x0B:
			return '1';
 10c:	81 e3       	ldi	r24, 0x31	; 49
 10e:	08 95       	ret
			break;
			case 0x07:
			return '*';
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	08 95       	ret
			break;
		}
		break;
		// Col1
		case 1:
		switch(rows_value)
 114:	2b 30       	cpi	r18, 0x0B	; 11
 116:	51 f0       	breq	.+20     	; 0x12c <KeyPad_getKey+0xa0>
 118:	18 f4       	brcc	.+6      	; 0x120 <KeyPad_getKey+0x94>
 11a:	27 30       	cpi	r18, 0x07	; 7
 11c:	49 f0       	breq	.+18     	; 0x130 <KeyPad_getKey+0xa4>
 11e:	2a c0       	rjmp	.+84     	; 0x174 <KeyPad_getKey+0xe8>
 120:	2d 30       	cpi	r18, 0x0D	; 13
 122:	69 f1       	breq	.+90     	; 0x17e <KeyPad_getKey+0xf2>
 124:	2e 30       	cpi	r18, 0x0E	; 14
 126:	31 f5       	brne	.+76     	; 0x174 <KeyPad_getKey+0xe8>
		{
			case 0x0E:
			return '8';
 128:	88 e3       	ldi	r24, 0x38	; 56
 12a:	08 95       	ret
			break;
			case 0x0D:
			return '5';
			break;
			case 0x0B:
			return '2';
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	08 95       	ret
			break;
			case 0x07:
			return '0';
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	08 95       	ret
			break;
		}
		break;
		// Col2
		case 2:
		switch(rows_value)
 134:	2b 30       	cpi	r18, 0x0B	; 11
 136:	51 f0       	breq	.+20     	; 0x14c <KeyPad_getKey+0xc0>
 138:	18 f4       	brcc	.+6      	; 0x140 <KeyPad_getKey+0xb4>
 13a:	27 30       	cpi	r18, 0x07	; 7
 13c:	49 f0       	breq	.+18     	; 0x150 <KeyPad_getKey+0xc4>
 13e:	1a c0       	rjmp	.+52     	; 0x174 <KeyPad_getKey+0xe8>
 140:	2d 30       	cpi	r18, 0x0D	; 13
 142:	f9 f0       	breq	.+62     	; 0x182 <KeyPad_getKey+0xf6>
 144:	2e 30       	cpi	r18, 0x0E	; 14
 146:	b1 f4       	brne	.+44     	; 0x174 <KeyPad_getKey+0xe8>
		{
			case 0x0E:
			return '9';
 148:	89 e3       	ldi	r24, 0x39	; 57
 14a:	08 95       	ret
			break;
			case 0x0D:
			return '6';
			break;
			case 0x0B:
			return '3';
 14c:	83 e3       	ldi	r24, 0x33	; 51
 14e:	08 95       	ret
			break;
			case 0x07:
			return '#';
 150:	83 e2       	ldi	r24, 0x23	; 35
 152:	08 95       	ret
			break;
		}
		break;
		// Col3
		case 3:
		switch(rows_value)
 154:	2b 30       	cpi	r18, 0x0B	; 11
 156:	51 f0       	breq	.+20     	; 0x16c <KeyPad_getKey+0xe0>
 158:	18 f4       	brcc	.+6      	; 0x160 <KeyPad_getKey+0xd4>
 15a:	27 30       	cpi	r18, 0x07	; 7
 15c:	49 f0       	breq	.+18     	; 0x170 <KeyPad_getKey+0xe4>
 15e:	0a c0       	rjmp	.+20     	; 0x174 <KeyPad_getKey+0xe8>
 160:	2d 30       	cpi	r18, 0x0D	; 13
 162:	89 f0       	breq	.+34     	; 0x186 <KeyPad_getKey+0xfa>
 164:	2e 30       	cpi	r18, 0x0E	; 14
 166:	31 f4       	brne	.+12     	; 0x174 <KeyPad_getKey+0xe8>
		{
			case 0x0E:
			return 'A';
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	08 95       	ret
			break;
			case 0x0D:
			return 'B';
			break;
			case 0x0B:
			return 'C';
 16c:	83 e4       	ldi	r24, 0x43	; 67
 16e:	08 95       	ret
			break;
			case 0x07:
			return 'D';
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	08 95       	ret
 174:	08 95       	ret
			break;
		}
	}
	if(count == 8)
	{
		return 'F';
 176:	86 e4       	ldi	r24, 0x46	; 70
 178:	08 95       	ret
		{
			case 0x0E:
			return '7';
			break;
			case 0x0D:
			return '4';
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	08 95       	ret
		{
			case 0x0E:
			return '8';
			break;
			case 0x0D:
			return '5';
 17e:	85 e3       	ldi	r24, 0x35	; 53
 180:	08 95       	ret
		{
			case 0x0E:
			return '9';
			break;
			case 0x0D:
			return '6';
 182:	86 e3       	ldi	r24, 0x36	; 54
 184:	08 95       	ret
		{
			case 0x0E:
			return 'A';
			break;
			case 0x0D:
			return 'B';
 186:	82 e4       	ldi	r24, 0x42	; 66
		break;

		default:
		break;
	}
}
 188:	08 95       	ret

0000018a <lcd_kick>:
	Send_Command(0x01);
}

void lcd_kick(void)
{
	Mr_LCD_Control &= ~(1<<EN);
 18a:	da 98       	cbi	0x1b, 2	; 27
	
	asm volatile("nop"); //asm volatile to write assembly in C code 
 18c:	00 00       	nop
	asm volatile("nop");//nop is no operation 
 18e:	00 00       	nop
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_kick+0xa>
 198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_kick+0x10>
 19a:	00 00       	nop
	_delay_ms(50);
	
	Mr_LCD_Control |=(1<<EN);
 19c:	da 9a       	sbi	0x1b, 2	; 27
 19e:	08 95       	ret

000001a0 <Send_Command>:
}

void Send_Command(unsigned char command)
{
	//check_lcd_isBusy();
	Mr_LCD_PORT=command;
 1a0:	85 bb       	out	0x15, r24	; 21
	ClrBit(Mr_LCD_Control,RS);//RS =0 for Command 
 1a2:	d8 98       	cbi	0x1b, 0	; 27
	ClrBit(Mr_LCD_Control,RW);// RW =0 for write in screen 
 1a4:	d9 98       	cbi	0x1b, 1	; 27
	lcd_kick();
 1a6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_kick>
 1aa:	08 95       	ret

000001ac <clear_screen>:
	}

}
void clear_screen(void)
{
	Send_Command(0x01);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 1b2:	08 95       	ret

000001b4 <LCD_Init>:
#include "avr/delay.h"
void LCD_Init(void)
{
	//_delay_ms(20);
	
	Mr_LCD_Control_Dir|=(1<<EN | 1<<RS | 1<<RW);//make 3 bits for control output
 1b4:	8a b3       	in	r24, 0x1a	; 26
 1b6:	87 60       	ori	r24, 0x07	; 7
 1b8:	8a bb       	out	0x1a, r24	; 26
	Mr_LCD_Control &=(1<<EN | 1<<RS | 1<<RW); // initialize at first =0
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	87 70       	andi	r24, 0x07	; 7
 1be:	8b bb       	out	0x1b, r24	; 27
	
	Mr_LCD_PORT_Dir=0xFF; //make all ports data to lcd output
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	84 bb       	out	0x14, r24	; 20
 1c4:	85 ea       	ldi	r24, 0xA5	; 165
 1c6:	9e e0       	ldi	r25, 0x0E	; 14
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_Init+0x14>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_Init+0x1a>
 1ce:	00 00       	nop
	_delay_ms(15);
	
		clear_screen ();
 1d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
		Send_Command(0x38); // Function Set: 8-bit, 2 Line, 5x7 Dots
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
	
		Send_Command(0x0E); // Display on Cursor on
 1da:	8e e0       	ldi	r24, 0x0E	; 14
 1dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
		Send_Command(0x06);// increment cursor (Entry Mode)
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
		Send_Command(0x80);// cursor position
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 1ec:	08 95       	ret

000001ee <Send_Character>:
	ClrBit(Mr_LCD_Control,RW);// RW =0 for write in screen 
	lcd_kick();
}
void Send_Character(unsigned char ch)
{
	SetBit(Mr_LCD_Control,RS); //RS=1 for Data
 1ee:	d8 9a       	sbi	0x1b, 0	; 27
	ClrBit(Mr_LCD_Control,RW); // RW=0 For Write
 1f0:	d9 98       	cbi	0x1b, 1	; 27
	Mr_LCD_PORT=ch;
 1f2:	85 bb       	out	0x15, r24	; 21
	lcd_kick();	
 1f4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_kick>
 1f8:	08 95       	ret

000001fa <Send_String>:
}
void Send_String(char* str)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	while(*str != '\0')
 200:	88 81       	ld	r24, Y
 202:	88 23       	and	r24, r24
 204:	31 f0       	breq	.+12     	; 0x212 <Send_String+0x18>
 206:	21 96       	adiw	r28, 0x01	; 1
	{
		Send_Character(*str);
 208:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Send_Character>
	Mr_LCD_PORT=ch;
	lcd_kick();	
}
void Send_String(char* str)
{
	while(*str != '\0')
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <Send_String+0xe>
	{
		Send_Character(*str);
		str++;
	}

}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_GotoXY>:
	
	Mr_LCD_Control |=(1<<EN);
}
void LCD_GotoXY(unsigned char row, unsigned char col)
{
	if(row == 0)
 218:	81 11       	cpse	r24, r1
 21a:	05 c0       	rjmp	.+10     	; 0x226 <LCD_GotoXY+0xe>
	{
		Send_Command(0x80 + col);
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	86 0f       	add	r24, r22
 220:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 224:	08 95       	ret
	}
	else if(row == 1)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	29 f4       	brne	.+10     	; 0x234 <LCD_GotoXY+0x1c>
	{
		Send_Command(0xC0 + col);
 22a:	80 ec       	ldi	r24, 0xC0	; 192
 22c:	86 0f       	add	r24, r22
 22e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 232:	08 95       	ret
	}
	else if (row == 2)
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	29 f4       	brne	.+10     	; 0x242 <LCD_GotoXY+0x2a>
	{
		Send_Command(0x94 + col);
 238:	84 e9       	ldi	r24, 0x94	; 148
 23a:	86 0f       	add	r24, r22
 23c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 240:	08 95       	ret
	}
	else if (row == 3)
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	21 f4       	brne	.+8      	; 0x24e <LCD_GotoXY+0x36>
	{
		Send_Command(0xD4 + col);
 246:	84 ed       	ldi	r24, 0xD4	; 212
 248:	86 0f       	add	r24, r22
 24a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Send_Command>
 24e:	08 95       	ret

00000250 <LCD_DisplayString_ATXY>:
	}
	
}
void LCD_DisplayString_ATXY(char *str,unsigned char row,unsigned char col)
{	
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ec 01       	movw	r28, r24
 256:	86 2f       	mov	r24, r22
	LCD_GotoXY(row,col);
 258:	64 2f       	mov	r22, r20
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_GotoXY>
	
	Send_String(str); //display the string
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Send_String>
	
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <main>:
{
	unsigned char x,i=0,t;
	unsigned char End=0;
	
	
	LCD_Init();
 26a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Init>
	USART_Init();
 26e:	0e 94 07 02 	call	0x40e	; 0x40e <USART_Init>
	KeyPad_Init();
 272:	0e 94 41 00 	call	0x82	; 0x82 <KeyPad_Init>
 276:	c1 c0       	rjmp	.+386    	; 0x3fa <main+0x190>
	while(1)
	{
		while(t<3) //Five Times Only to enter the right password
		{
			LCD_DisplayString_ATXY("Please Enter pass",0,0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	80 e6       	ldi	r24, 0x60	; 96
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
 284:	d0 e0       	ldi	r29, 0x00	; 0
			while(i<2) //the password will be 2 numbers
			{
				x=KeyPad_getKey();//get key from keypad
 286:	0e 94 46 00 	call	0x8c	; 0x8c <KeyPad_getKey>
 28a:	c8 2f       	mov	r28, r24
				
				if(x!='F') //in keypad_func "if no key is pressed send 'F'
 28c:	86 34       	cpi	r24, 0x46	; 70
 28e:	79 f0       	breq	.+30     	; 0x2ae <main+0x44>
				{
					LCD_GotoXY(3,i);
 290:	6d 2f       	mov	r22, r29
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_GotoXY>
					Send_Character(x);
 298:	8c 2f       	mov	r24, r28
 29a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Send_Character>
					USART_FUN_TRANSMIT(x);///transmit the given password to UC2
 29e:	8c 2f       	mov	r24, r28
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
					i++;
 2a6:	df 5f       	subi	r29, 0xFF	; 255
	while(1)
	{
		while(t<3) //Five Times Only to enter the right password
		{
			LCD_DisplayString_ATXY("Please Enter pass",0,0);
			while(i<2) //the password will be 2 numbers
 2a8:	d2 30       	cpi	r29, 0x02	; 2
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <main+0x48>
 2ac:	ec cf       	rjmp	.-40     	; 0x286 <main+0x1c>
 2ae:	d2 30       	cpi	r29, 0x02	; 2
 2b0:	50 f3       	brcs	.-44     	; 0x286 <main+0x1c>
					i++;
				}
			}
			i=0;
			
			if( USART_FUN_Receive()>'0')//each receieve function must have tran_function
 2b2:	0e 94 26 02 	call	0x44c	; 0x44c <USART_FUN_Receive>
 2b6:	81 33       	cpi	r24, 0x31	; 49
 2b8:	a0 f0       	brcs	.+40     	; 0x2e2 <main+0x78>
			{
				clear_screen();
 2ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
				t++;
 2be:	1f 5f       	subi	r17, 0xFF	; 255
				LCD_DisplayString_ATXY("Password is Wrong",0,0);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	82 e7       	ldi	r24, 0x72	; 114
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
 2cc:	2f e3       	ldi	r18, 0x3F	; 63
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x68>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x72>
 2dc:	00 00       	nop
				_delay_ms(1000);
				clear_screen();
 2de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
			}
			if(USART_FUN_Receive()=='0')
 2e2:	0e 94 26 02 	call	0x44c	; 0x44c <USART_FUN_Receive>
 2e6:	80 33       	cpi	r24, 0x30	; 48
 2e8:	09 f0       	breq	.+2      	; 0x2ec <main+0x82>
 2ea:	87 c0       	rjmp	.+270    	; 0x3fa <main+0x190>
			{
				clear_screen();
 2ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
				t=0;
				LCD_DisplayString_ATXY("Password is right",0,0);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
				
				End=0;
				while(1 && !End)
				{
					LCD_DisplayString_ATXY("A:Open The Door",1,0);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	86 e9       	ldi	r24, 0x96	; 150
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
					LCD_DisplayString_ATXY("B:Close The Door",2,0);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	86 ea       	ldi	r24, 0xA6	; 166
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
					LCD_DisplayString_ATXY("C:Change Password",3,0);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	87 eb       	ldi	r24, 0xB7	; 183
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
					
					while(1)
					{
						x=KeyPad_getKey();
 320:	0e 94 46 00 	call	0x8c	; 0x8c <KeyPad_getKey>
 324:	c8 2f       	mov	r28, r24
						if(x!='F')
 326:	86 34       	cpi	r24, 0x46	; 70
 328:	d9 f3       	breq	.-10     	; 0x320 <main+0xb6>
						{
							clear_screen();
 32a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
							if(x=='A')
 32e:	c1 34       	cpi	r28, 0x41	; 65
 330:	b1 f4       	brne	.+44     	; 0x35e <main+0xf4>
							{
								USART_FUN_TRANSMIT('A');
 332:	81 e4       	ldi	r24, 0x41	; 65
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
								clear_screen();
 33a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
								LCD_DisplayString_ATXY("Door is Opened",0,0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	89 ec       	ldi	r24, 0xC9	; 201
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
 34a:	2f e3       	ldi	r18, 0x3F	; 63
 34c:	8d e0       	ldi	r24, 0x0D	; 13
 34e:	93 e0       	ldi	r25, 0x03	; 3
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0xe6>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xf0>
 35a:	00 00       	nop
 35c:	cf cf       	rjmp	.-98     	; 0x2fc <main+0x92>
								_delay_ms(1000);
								
								break;
							}
							else if(x=='B')
 35e:	c2 34       	cpi	r28, 0x42	; 66
 360:	b1 f4       	brne	.+44     	; 0x38e <main+0x124>
							{
								USART_FUN_TRANSMIT('B');
 362:	82 e4       	ldi	r24, 0x42	; 66
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
								clear_screen();
 36a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
								LCD_DisplayString_ATXY("Door is Closed",0,0);
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	88 ed       	ldi	r24, 0xD8	; 216
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
 37a:	2f e3       	ldi	r18, 0x3F	; 63
 37c:	8d e0       	ldi	r24, 0x0D	; 13
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	21 50       	subi	r18, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x116>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x120>
 38a:	00 00       	nop
								_delay_ms(1000);
								End=1;
								break;
 38c:	3e c0       	rjmp	.+124    	; 0x40a <main+0x1a0>
							}
							else if(x=='C')
 38e:	c3 34       	cpi	r28, 0x43	; 67
 390:	39 f6       	brne	.-114    	; 0x320 <main+0xb6>
							{
								USART_FUN_TRANSMIT('C');
 392:	83 e4       	ldi	r24, 0x43	; 67
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
								clear_screen();
 39a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
								LCD_DisplayString_ATXY("Enter New Password",0,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	87 ee       	ldi	r24, 0xE7	; 231
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
								while (i<2)
								{
									x=KeyPad_getKey();
 3ac:	0e 94 46 00 	call	0x8c	; 0x8c <KeyPad_getKey>
 3b0:	c8 2f       	mov	r28, r24
									if (x!='F')
 3b2:	86 34       	cpi	r24, 0x46	; 70
 3b4:	d9 f3       	breq	.-10     	; 0x3ac <main+0x142>
									{
										LCD_GotoXY(3,i);
 3b6:	6d 2f       	mov	r22, r29
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_GotoXY>
										Send_Character(x);
 3be:	8c 2f       	mov	r24, r28
 3c0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Send_Character>
										USART_FUN_TRANSMIT(x);
 3c4:	8c 2f       	mov	r24, r28
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
										i++;
 3cc:	df 5f       	subi	r29, 0xFF	; 255
							else if(x=='C')
							{
								USART_FUN_TRANSMIT('C');
								clear_screen();
								LCD_DisplayString_ATXY("Enter New Password",0,0);
								while (i<2)
 3ce:	d2 30       	cpi	r29, 0x02	; 2
 3d0:	68 f3       	brcs	.-38     	; 0x3ac <main+0x142>
										i++;
									}
								
								}
								i=0;
								clear_screen();
 3d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
								LCD_DisplayString_ATXY("Password Saved",0,0);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	8a ef       	ldi	r24, 0xFA	; 250
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 28 01 	call	0x250	; 0x250 <LCD_DisplayString_ATXY>
								clear_screen();
 3e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <clear_screen>
 3e6:	2f e3       	ldi	r18, 0x3F	; 63
 3e8:	8d e0       	ldi	r24, 0x0D	; 13
 3ea:	93 e0       	ldi	r25, 0x03	; 3
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x182>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x18c>
 3f6:	00 00       	nop
								_delay_ms(1000);
								End=1;
								break;
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <main+0x1a0>
	LCD_Init();
	USART_Init();
	KeyPad_Init();
	while(1)
	{
		while(t<3) //Five Times Only to enter the right password
 3fa:	13 30       	cpi	r17, 0x03	; 3
 3fc:	08 f4       	brcc	.+2      	; 0x400 <main+0x196>
 3fe:	3c cf       	rjmp	.-392    	; 0x278 <main+0xe>
			}
			
		}
		if(t>=3)
		{
			USART_FUN_TRANSMIT('N');
 400:	8e e4       	ldi	r24, 0x4E	; 78
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_FUN_TRANSMIT>
 408:	f8 cf       	rjmp	.-16     	; 0x3fa <main+0x190>
				clear_screen();
			}
			if(USART_FUN_Receive()=='0')
			{
				clear_screen();
				t=0;
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	f6 cf       	rjmp	.-20     	; 0x3fa <main+0x190>

0000040e <USART_Init>:

/*******functions For UART*******/

void USART_Init(void)
{
     sei();//ENABLE GLOBAL INTTERPUT
 40e:	78 94       	sei
	 UBRRL = 0x67;
 410:	87 e6       	ldi	r24, 0x67	; 103
 412:	89 b9       	out	0x09, r24	; 9
UBRRL = (u8) (UBRR_VAL);*/

/****enable THE TRANSIMTER AND RECEVIER****/

#if USART_TRANSMIT==USART_ENABLE
SetBit(UCSRB,TXEN);
 414:	53 9a       	sbi	0x0a, 3	; 10
#elif USART_TRANSMIT==USART_DISABLE
ClrBit(UCSRB,TXEN);
#endif
#if USART_RECIEVE==USART_ENABLE
SetBit(UCSRB,RXEN);
 416:	54 9a       	sbi	0x0a, 4	; 10
#endif // USART_RECIEVE
/**************SET CHARACTER SIZE********/
#if USART_CHAR_SIZE != USART_9_Bit_CHAR
UCSRC=(1<<URSEL)| (USART_CHAR_SIZE);
#elif USART_CHAR_SIZE == USART_9_Bit_CHAR
UCSRC=(1<<URSEL)| (USART_CHAR_SIZE);
 418:	86 e8       	ldi	r24, 0x86	; 134
 41a:	80 bd       	out	0x20, r24	; 32
SetBit(UCSRB,2);
 41c:	52 9a       	sbi	0x0a, 2	; 10
#endif // USART_CHAR_SIZE*/


		  /***************SET DOUBLE SPEED******/
           #if (USART_SPEED_MODE== USART_DOUBLE_SPEED)
		    SetBit(UCSRA,U2X);
 41e:	59 9a       	sbi	0x0b, 1	; 11
            #endif // USART_DOUBLE_SPEED
/*
            /**************** Set Parity Bit***************/
		UCSRC |= (1<<URSEL) | USART_PARITY_MODE;
 420:	80 b5       	in	r24, 0x20	; 32
 422:	80 68       	ori	r24, 0x80	; 128
 424:	80 bd       	out	0x20, r24	; 32
		/**************** Set SYNCH ASYNCH***************/
	UCSRC |= (1<<URSEL) | USART_SYNCH_MODE;
 426:	80 b5       	in	r24, 0x20	; 32
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	80 bd       	out	0x20, r24	; 32
		/**************** Set Stop Bit***************/
	UCSRC |= (1<<URSEL) | USART_STOPBIT;
 42c:	80 b5       	in	r24, 0x20	; 32
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	80 bd       	out	0x20, r24	; 32
		/***************RECIEVER INT ENABLE**********/
	UCSRB |= USART_RECIEVE_INT;
 432:	8a b1       	in	r24, 0x0a	; 10
 434:	8a b9       	out	0x0a, r24	; 10
		/***************TRANSMITER INT ENABLE**********/
	UCSRB |= USART_TRANSMITER_INT;
 436:	8a b1       	in	r24, 0x0a	; 10
 438:	8a b9       	out	0x0a, r24	; 10
 43a:	08 95       	ret

0000043c <USART_FUN_TRANSMIT>:
* Prerequisite: USART Init
* Return: None
 ***********************************************/
    void USART_FUN_TRANSMIT(u16 data)
    {	/*//Wait for the UDR to be empty*/
        while(!(UCSRA&(1<<UDRE)));
 43c:	5d 9b       	sbis	0x0b, 5	; 11
 43e:	fe cf       	rjmp	.-4      	; 0x43c <USART_FUN_TRANSMIT>
		 /*****IF THE DATA TRANSMIITED IN 9 BITS MODE SO WE WRITE
        THE MOST BIT FRIST IN THIER PLACE UCSRB***/
        #ifdef USART_CHAR_SIZE==USART_9_Bit_CHAR
        UCSRB|=GetBit(data,8);//THE TXB8 in the frist bit in UCSRB so Getbit wil get single bit only in the frist 
 440:	2a b1       	in	r18, 0x0a	; 10
 442:	91 70       	andi	r25, 0x01	; 1
 444:	92 2b       	or	r25, r18
 446:	9a b9       	out	0x0a, r25	; 10
		#endif
		//Put the data the lower 8 bits in UDR	
		
     
	 
	   UDR=(u8)data;
 448:	8c b9       	out	0x0c, r24	; 12
 44a:	08 95       	ret

0000044c <USART_FUN_Receive>:
{
/*	u8 Parity_Error=error;
	*Ptr_To_Val=0; 
	
	/*Wait for data to be received*/
	while(!(UCSRA&(1<<RXC)));
 44c:	5f 9b       	sbis	0x0b, 7	; 11
 44e:	fe cf       	rjmp	.-4      	; 0x44c <USART_FUN_Receive>
	return UDR;
 450:	8c b1       	in	r24, 0x0c	; 12

	}
	return Parity_Error;
	*/
	
}
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
