
CRTL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000035a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000198  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b42  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000570  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000704  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002ac  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003f7  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000450  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  Author: abdelrhman mady ebrahim
 */ 

void set_Dir_PIN (unsigned char *DDRX,unsigned char Dir,unsigned char PIN){
	
	if(Dir == 1)
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	
	*DDRX |= (1<< PIN);
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	
	else if(Dir == 0)
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
	
	*DDRX &= (~(1<< PIN));
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Timer_For_Door.h"
#include "TWI.h"
#include "External_EEPROM.h"
#include "avr/delay.h"
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	unsigned char x,y,z=0,n=0;
	unsigned short i='A' ,Fault='0';
	USART_Init();
  76:	0e 94 88 01 	call	0x310	; 0x310 <USART_Init>
	TWI_init();
  7a:	0e 94 67 01 	call	0x2ce	; 0x2ce <TWI_init>
	
	while (z<2)
	{
		EEPROM_Write_Byte(z,i);
  7e:	61 e4       	ldi	r22, 0x41	; 65
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 b8 00 	call	0x170	; 0x170 <EEPROM_Write_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e1       	ldi	r24, 0x1F	; 31
  8a:	9e e4       	ldi	r25, 0x4E	; 78
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
  94:	62 e4       	ldi	r22, 0x42	; 66
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <EEPROM_Write_Byte>
  9e:	8f e1       	ldi	r24, 0x1F	; 31
  a0:	9e e4       	ldi	r25, 0x4E	; 78
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
  aa:	0f 2e       	mov	r0, r31
  ac:	f0 e3       	ldi	r31, 0x30	; 48
  ae:	af 2e       	mov	r10, r31
  b0:	b1 2c       	mov	r11, r1
  b2:	f0 2d       	mov	r31, r0
  b4:	e1 2c       	mov	r14, r1
				Fault++;
			}
			z++;
		}
		
		z=0;
  b6:	d1 2c       	mov	r13, r1
  b8:	11 c0       	rjmp	.+34     	; 0xdc <main+0x70>
	while (1)
	{
		
		while(z<2)
		{
			x=USART_FUN_Receive();
  ba:	0e 94 a7 01 	call	0x34e	; 0x34e <USART_FUN_Receive>
  be:	18 2f       	mov	r17, r24
			EEPROM_Read_Byte(z,&y);
  c0:	be 01       	movw	r22, r28
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	8e 2d       	mov	r24, r14
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 ef 00 	call	0x1de	; 0x1de <EEPROM_Read_Byte>
			if (x!=y)
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	18 17       	cp	r17, r24
  d2:	19 f0       	breq	.+6      	; 0xda <main+0x6e>
			{
				Fault++;
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	a9 1a       	sub	r10, r25
  d8:	b9 0a       	sbc	r11, r25
			}
			z++;
  da:	e3 94       	inc	r14
	z=0;
	
	while (1)
	{
		
		while(z<2)
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8e 15       	cp	r24, r14
  e0:	60 f7       	brcc	.-40     	; 0xba <main+0x4e>
			z++;
		}
		
		z=0;
		//tranmist to HIM-Mircocontroller Two Times 
		USART_FUN_TRANSMIT(Fault);	//One for if( USART_FUN_Receive()>'0')
  e2:	c5 01       	movw	r24, r10
  e4:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_FUN_TRANSMIT>
		USART_FUN_TRANSMIT(Fault); //	one for if(USART_FUN_Receive()=='0')
  e8:	c5 01       	movw	r24, r10
  ea:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_FUN_TRANSMIT>
		
		if (x=='N')
  ee:	1e 34       	cpi	r17, 0x4E	; 78
  f0:	69 f4       	brne	.+26     	; 0x10c <main+0xa0>
		{
			Led_ON();
  f2:	0e 94 41 01 	call	0x282	; 0x282 <Led_ON>
		{
			Led_OFF();
		}
		
		
		while(Fault=='0')
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	a9 16       	cp	r10, r25
  fa:	b1 04       	cpc	r11, r1
  fc:	61 f0       	breq	.+24     	; 0x116 <main+0xaa>
				n=0;
			break;
			}
		}
		
		Fault='0';
  fe:	0f 2e       	mov	r0, r31
 100:	f0 e3       	ldi	r31, 0x30	; 48
 102:	af 2e       	mov	r10, r31
 104:	b1 2c       	mov	r11, r1
 106:	f0 2d       	mov	r31, r0
				Fault++;
			}
			z++;
		}
		
		z=0;
 108:	ed 2c       	mov	r14, r13
 10a:	e8 cf       	rjmp	.-48     	; 0xdc <main+0x70>
		
		if (x=='N')
		{
			Led_ON();
		}
		else if (x=='O')
 10c:	1f 34       	cpi	r17, 0x4F	; 79
 10e:	99 f7       	brne	.-26     	; 0xf6 <main+0x8a>
		{
			Led_OFF();
 110:	0e 94 44 01 	call	0x288	; 0x288 <Led_OFF>
 114:	f0 cf       	rjmp	.-32     	; 0xf6 <main+0x8a>
		}
		
		
		while(Fault=='0')
		{
			x=USART_FUN_Receive();
 116:	0e 94 a7 01 	call	0x34e	; 0x34e <USART_FUN_Receive>
 11a:	18 2f       	mov	r17, r24
			
			if (x=='A')
 11c:	81 34       	cpi	r24, 0x41	; 65
 11e:	19 f4       	brne	.+6      	; 0x126 <main+0xba>
			{
				Open_Door();
 120:	0e 94 47 01 	call	0x28e	; 0x28e <Open_Door>
 124:	f8 cf       	rjmp	.-16     	; 0x116 <main+0xaa>
			}
			else if (x=='B')
 126:	82 34       	cpi	r24, 0x42	; 66
 128:	21 f4       	brne	.+8      	; 0x132 <main+0xc6>
			{
				Close_Door();
 12a:	0e 94 57 01 	call	0x2ae	; 0x2ae <Close_Door>
				Fault++;
			}
			z++;
		}
		
		z=0;
 12e:	ed 2c       	mov	r14, r13
				Open_Door();
			}
			else if (x=='B')
			{
				Close_Door();
				break;
 130:	d5 cf       	rjmp	.-86     	; 0xdc <main+0x70>
			}
			else if (x=='C')
 132:	83 34       	cpi	r24, 0x43	; 67
 134:	81 f7       	brne	.-32     	; 0x116 <main+0xaa>
			{
				
				while (n<2)
				{
					x=USART_FUN_Receive();
 136:	0e 94 a7 01 	call	0x34e	; 0x34e <USART_FUN_Receive>
					//if (x!='D')
					//	{
					EEPROM_Write_Byte(n,x);
 13a:	68 2f       	mov	r22, r24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 b8 00 	call	0x170	; 0x170 <EEPROM_Write_Byte>
 144:	8f e1       	ldi	r24, 0x1F	; 31
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xdc>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xe2>
 14e:	00 00       	nop
			else if (x=='C')
			{
				
				while (n<2)
				{
					x=USART_FUN_Receive();
 150:	0e 94 a7 01 	call	0x34e	; 0x34e <USART_FUN_Receive>
 154:	18 2f       	mov	r17, r24
					//if (x!='D')
					//	{
					EEPROM_Write_Byte(n,x);
 156:	68 2f       	mov	r22, r24
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 b8 00 	call	0x170	; 0x170 <EEPROM_Write_Byte>
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xf8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xfe>
 16a:	00 00       	nop
				Fault++;
			}
			z++;
		}
		
		z=0;
 16c:	ed 2c       	mov	r14, r13
 16e:	b6 cf       	rjmp	.-148    	; 0xdc <main+0x70>

00000170 <EEPROM_Write_Byte>:

 }
 
 
 unsigned char EEPROM_Write_Byte(unsigned short u16add,unsigned char u8data)
{
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	16 2f       	mov	r17, r22
	TWI_Start(); // Frist Send the start bit
 17a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <TWI_Start>
	
	
	// Check the status register for the start bit
		if (TWI_Get_Status()!=TW_START)
 17e:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	09 f5       	brne	.+66     	; 0x1c8 <EEPROM_Write_Byte+0x58>
	return ERROR; 
	
	//EEPROM have 2048 bytes so you need 11 bits to acccess the addres 
	//So frist you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=0 And A10 And A9 And A8
	
	TWI_write((unsigned char) ((0xA0) | ((u16add & 0x0700)>>7)));
 186:	ce 01       	movw	r24, r28
 188:	88 27       	eor	r24, r24
 18a:	97 70       	andi	r25, 0x07	; 7
 18c:	88 0f       	add	r24, r24
 18e:	89 2f       	mov	r24, r25
 190:	88 1f       	adc	r24, r24
 192:	99 0b       	sbc	r25, r25
 194:	91 95       	neg	r25
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	//check the status register for the slave address and 
	if (TWI_Get_Status()!=TW_MT_SLA_W_ACK)
 19c:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 1a0:	88 31       	cpi	r24, 0x18	; 24
 1a2:	a1 f4       	brne	.+40     	; 0x1cc <EEPROM_Write_Byte+0x5c>
	return ERROR;
	
	
	//Then send address from A7 to A0
	TWI_write((unsigned char)(u16add));
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	if (TWI_Get_Status()!=TW_MT_DATA_ACK)
 1aa:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 1ae:	88 32       	cpi	r24, 0x28	; 40
 1b0:	79 f4       	brne	.+30     	; 0x1d0 <EEPROM_Write_Byte+0x60>
	return ERROR;
	TWI_write(u8data);
 1b2:	81 2f       	mov	r24, r17
 1b4:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
 1b8:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 1bc:	88 32       	cpi	r24, 0x28	; 40
 1be:	51 f4       	brne	.+20     	; 0x1d4 <EEPROM_Write_Byte+0x64>
	return ERROR;
	
	TWI_Stop(); // in stop bit you dont need to check the status register 
 1c0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <TWI_Stop>
	
	return SUCCESS;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <EEPROM_Write_Byte+0x66>
	TWI_Start(); // Frist Send the start bit
	
	
	// Check the status register for the start bit
		if (TWI_Get_Status()!=TW_START)
	return ERROR; 
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <EEPROM_Write_Byte+0x66>
	//So frist you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=0 And A10 And A9 And A8
	
	TWI_write((unsigned char) ((0xA0) | ((u16add & 0x0700)>>7)));
	//check the status register for the slave address and 
	if (TWI_Get_Status()!=TW_MT_SLA_W_ACK)
	return ERROR;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <EEPROM_Write_Byte+0x66>
	
	
	//Then send address from A7 to A0
	TWI_write((unsigned char)(u16add));
	if (TWI_Get_Status()!=TW_MT_DATA_ACK)
	return ERROR;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <EEPROM_Write_Byte+0x66>
	TWI_write(u8data);
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
	return ERROR;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop(); // in stop bit you dont need to check the status register 
	
	return SUCCESS;

}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <EEPROM_Read_Byte>:


unsigned char EEPROM_Read_Byte(unsigned short u16add,unsigned char *u8data)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	8b 01       	movw	r16, r22
	TWI_Start(); // Frist Send the start bit
 1ee:	0e 94 6e 01 	call	0x2dc	; 0x2dc <TWI_Start>
	
	// Check the status register for the start bit
	if (TWI_Get_Status()!=TW_START)
 1f2:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	91 f5       	brne	.+100    	; 0x25e <EEPROM_Read_Byte+0x80>
	return ERROR;
	
	
	//EEPROM have 2048 bytes so you need 11 bits to access the address
	//So frist you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=0 for WRITE And A10 And A9 And A8
	TWI_write((unsigned char) (0xA0 | ((u16add & 0x0700)>>7)));
 1fa:	7e 01       	movw	r14, r28
 1fc:	ee 24       	eor	r14, r14
 1fe:	87 e0       	ldi	r24, 0x07	; 7
 200:	f8 22       	and	r15, r24
 202:	ee 0c       	add	r14, r14
 204:	ef 2c       	mov	r14, r15
 206:	ee 1c       	adc	r14, r14
 208:	ff 08       	sbc	r15, r15
 20a:	f1 94       	neg	r15
 20c:	8e 2d       	mov	r24, r14
 20e:	80 6a       	ori	r24, 0xA0	; 160
 210:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	//check the status register for the slave address and
	if (TWI_Get_Status()!=TW_MT_SLA_W_ACK)
 214:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 218:	88 31       	cpi	r24, 0x18	; 24
 21a:	19 f5       	brne	.+70     	; 0x262 <EEPROM_Read_Byte+0x84>
	return ERROR;
	
	//Then send address from A7 to A0
	TWI_write((unsigned char)(u16add));
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	if (TWI_Get_Status()!=TW_MT_DATA_ACK)
 222:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 226:	88 32       	cpi	r24, 0x28	; 40
 228:	f1 f4       	brne	.+60     	; 0x266 <EEPROM_Read_Byte+0x88>
	return ERROR;
	
	// so we need to Repeat start to start read from eeprom
	TWI_Start();
 22a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <TWI_Start>
	if(TWI_Get_Status()!=TW_REP_START)
 22e:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 232:	80 31       	cpi	r24, 0x10	; 16
 234:	d1 f4       	brne	.+52     	; 0x26a <EEPROM_Read_Byte+0x8c>
	return ERROR;

//So first you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=1 for READ And A10 And A9 And A8
 TWI_write((unsigned char) (0xA0 | ((u16add & 0x0700)>>7)|1));// HOW OR WITH 1?????? 
 236:	8e 2d       	mov	r24, r14
 238:	81 6a       	ori	r24, 0xA1	; 161
 23a:	0e 94 77 01 	call	0x2ee	; 0x2ee <TWI_write>
	if (TWI_Get_Status()!=TW_MT_SLA_R_ACK)
 23e:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 242:	80 34       	cpi	r24, 0x40	; 64
 244:	a1 f4       	brne	.+40     	; 0x26e <EEPROM_Read_Byte+0x90>
	return ERROR;
	
	*u8data=TWI_Read_With_NAck();
 246:	0e 94 7e 01 	call	0x2fc	; 0x2fc <TWI_Read_With_NAck>
 24a:	f8 01       	movw	r30, r16
 24c:	80 83       	st	Z, r24
	 if (TWI_Get_Status() != TW_MR_DATA_NACK)
 24e:	0e 94 85 01 	call	0x30a	; 0x30a <TWI_Get_Status>
 252:	88 35       	cpi	r24, 0x58	; 88
 254:	71 f4       	brne	.+28     	; 0x272 <EEPROM_Read_Byte+0x94>
	 return ERROR;
	
	
	TWI_Stop(); // in stop bit you don't need to check the status register
 256:	0e 94 74 01 	call	0x2e8	; 0x2e8 <TWI_Stop>
	
	return SUCCESS;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	0b c0       	rjmp	.+22     	; 0x274 <EEPROM_Read_Byte+0x96>
{
	TWI_Start(); // Frist Send the start bit
	
	// Check the status register for the start bit
	if (TWI_Get_Status()!=TW_START)
	return ERROR;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	09 c0       	rjmp	.+18     	; 0x274 <EEPROM_Read_Byte+0x96>
	//EEPROM have 2048 bytes so you need 11 bits to access the address
	//So frist you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=0 for WRITE And A10 And A9 And A8
	TWI_write((unsigned char) (0xA0 | ((u16add & 0x0700)>>7)));
	//check the status register for the slave address and
	if (TWI_Get_Status()!=TW_MT_SLA_W_ACK)
	return ERROR;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	07 c0       	rjmp	.+14     	; 0x274 <EEPROM_Read_Byte+0x96>
	
	//Then send address from A7 to A0
	TWI_write((unsigned char)(u16add));
	if (TWI_Get_Status()!=TW_MT_DATA_ACK)
	return ERROR;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	05 c0       	rjmp	.+10     	; 0x274 <EEPROM_Read_Byte+0x96>
	
	// so we need to Repeat start to start read from eeprom
	TWI_Start();
	if(TWI_Get_Status()!=TW_REP_START)
	return ERROR;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	03 c0       	rjmp	.+6      	; 0x274 <EEPROM_Read_Byte+0x96>

//So first you send the fixed ID for EEPROM 0b1010=0xA, And R/w bit=1 for READ And A10 And A9 And A8
 TWI_write((unsigned char) (0xA0 | ((u16add & 0x0700)>>7)|1));// HOW OR WITH 1?????? 
	if (TWI_Get_Status()!=TW_MT_SLA_R_ACK)
	return ERROR;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <EEPROM_Read_Byte+0x96>
	
	*u8data=TWI_Read_With_NAck();
	 if (TWI_Get_Status() != TW_MR_DATA_NACK)
	 return ERROR;
 272:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop(); // in stop bit you don't need to check the status register
	
	return SUCCESS;

}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <Led_ON>:
 */ 
#include<avr/io.h>

void Led_ON(){
	
	DDRC |= (1<<PC5);
 282:	a5 9a       	sbi	0x14, 5	; 20
	PORTC |= (1<<PC5);
 284:	ad 9a       	sbi	0x15, 5	; 21
 286:	08 95       	ret

00000288 <Led_OFF>:
}
void Led_OFF(){
	
	DDRC |= (1<<PC5);
 288:	a5 9a       	sbi	0x14, 5	; 20
	PORTC &=(~(1<<PC5));
 28a:	ad 98       	cbi	0x15, 5	; 21
 28c:	08 95       	ret

0000028e <Open_Door>:
 */ 
#include<avr/io.h>
void Open_Door(){
	
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 28e:	8f b5       	in	r24, 0x2f	; 47
 290:	82 6a       	ori	r24, 0xA2	; 162
 292:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
 294:	8e b5       	in	r24, 0x2e	; 46
 296:	8a 61       	ori	r24, 0x1A	; 26
 298:	8e bd       	out	0x2e, r24	; 46
	ICR1=19999;
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	97 bd       	out	0x27, r25	; 39
 2a0:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD5);
 2a2:	8d 9a       	sbi	0x11, 5	; 17
	OCR1A =1238;
 2a4:	86 ed       	ldi	r24, 0xD6	; 214
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	9b bd       	out	0x2b, r25	; 43
 2aa:	8a bd       	out	0x2a, r24	; 42
 2ac:	08 95       	ret

000002ae <Close_Door>:
}
void Close_Door(){
	
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 2ae:	8f b5       	in	r24, 0x2f	; 47
 2b0:	82 6a       	ori	r24, 0xA2	; 162
 2b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
 2b4:	8e b5       	in	r24, 0x2e	; 46
 2b6:	8a 61       	ori	r24, 0x1A	; 26
 2b8:	8e bd       	out	0x2e, r24	; 46
	ICR1=19999;
 2ba:	8f e1       	ldi	r24, 0x1F	; 31
 2bc:	9e e4       	ldi	r25, 0x4E	; 78
 2be:	97 bd       	out	0x27, r25	; 39
 2c0:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD5);
 2c2:	8d 9a       	sbi	0x11, 5	; 17
	OCR1A =337;
 2c4:	81 e5       	ldi	r24, 0x51	; 81
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9b bd       	out	0x2b, r25	; 43
 2ca:	8a bd       	out	0x2a, r24	; 42
 2cc:	08 95       	ret

000002ce <TWI_init>:


void TWI_init(void)
{
	//Frist : to work scl by 400kps so we put TWBR =0x02 and TWPS Bits in TWSR 00
	TWBR=0x02;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 b9       	out	0x00, r24	; 0
	TWSR=0x00;
 2d2:	11 b8       	out	0x01, r1	; 1
	//Second : /* Two Wire Bus address TWAR if any master device want to call me: 0x1 
	TWAR=0x02;// my addres is 0x01 bec 0x02 =b0000001,0 and bit for call recogniton
 2d4:	82 b9       	out	0x02, r24	; 2
	
	//Enable TWI
	TWCR=(1<<TWEN);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	86 bf       	out	0x36, r24	; 54
 2da:	08 95       	ret

000002dc <TWI_Start>:
	
}
void TWI_Start()
{
	//1) CLear TWINT by put 1 on it 2)Put 1 >> TWSTA 3) ENABLE TWI 
TWCR=(1<<TWINT | 1<<TWSTA | 1<<TWEN);
 2dc:	84 ea       	ldi	r24, 0xA4	; 164
 2de:	86 bf       	out	0x36, r24	; 54
while(!( TWCR & (1<<TWINT) ));	
 2e0:	06 b6       	in	r0, 0x36	; 54
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <TWI_Start+0x4>
} 
 2e6:	08 95       	ret

000002e8 <TWI_Stop>:
void TWI_Stop()
{	//1) CLear TWINT by put 1 on it 2)Put 1 >> TWSTO 3) ENABLE TWI 
	TWCR=(1<<TWINT | 1<<TWSTO | 1<<TWEN);
 2e8:	84 e9       	ldi	r24, 0x94	; 148
 2ea:	86 bf       	out	0x36, r24	; 54
 2ec:	08 95       	ret

000002ee <TWI_write>:

}

void TWI_write(unsigned char data)
{
	TWDR=data;
 2ee:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT | 1<<TWEN);
 2f0:	84 e8       	ldi	r24, 0x84	; 132
 2f2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & 1<<TWINT	));
 2f4:	06 b6       	in	r0, 0x36	; 54
 2f6:	07 fe       	sbrs	r0, 7
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <TWI_write+0x6>
	
}
 2fa:	08 95       	ret

000002fc <TWI_Read_With_NAck>:
	return TWDR;
	}
	
unsigned char TWI_Read_With_NAck(void)
	{
		TWCR=(1<<TWINT | 1<< TWEN ); //without Ack
 2fc:	84 e8       	ldi	r24, 0x84	; 132
 2fe:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));
 300:	06 b6       	in	r0, 0x36	; 54
 302:	07 fe       	sbrs	r0, 7
 304:	fd cf       	rjmp	.-6      	; 0x300 <TWI_Read_With_NAck+0x4>
		return TWDR;
 306:	83 b1       	in	r24, 0x03	; 3
	}
 308:	08 95       	ret

0000030a <TWI_Get_Status>:
	unsigned char TWI_Get_Status(void)
	{
		unsigned char status;
		status = TWSR & 0xf8; //to mask the 2 bit of prscale and 1 bit reserved in TWSR
 30a:	81 b1       	in	r24, 0x01	; 1
		return status;
	}
 30c:	88 7f       	andi	r24, 0xF8	; 248
 30e:	08 95       	ret

00000310 <USART_Init>:

/*******functions For UART*******/

void USART_Init(void)
{
     sei();//ENABLE GLOBAL INTTERPUT
 310:	78 94       	sei
	 UBRRL = 0x67;
 312:	87 e6       	ldi	r24, 0x67	; 103
 314:	89 b9       	out	0x09, r24	; 9
UBRRL = (u8) (UBRR_VAL);*/

/****enable THE TRANSIMTER AND RECEVIER****/

#if USART_TRANSMIT==USART_ENABLE
SetBit(UCSRB,TXEN);
 316:	53 9a       	sbi	0x0a, 3	; 10
#elif USART_TRANSMIT==USART_DISABLE
ClrBit(UCSRB,TXEN);
#endif
#if USART_RECIEVE==USART_ENABLE
SetBit(UCSRB,RXEN);
 318:	54 9a       	sbi	0x0a, 4	; 10
#endif // USART_RECIEVE
/**************SET CHARACTER SIZE********/
#if USART_CHAR_SIZE != USART_9_Bit_CHAR
UCSRC=(1<<URSEL)| (USART_CHAR_SIZE);
#elif USART_CHAR_SIZE == USART_9_Bit_CHAR
UCSRC=(1<<URSEL)| (USART_CHAR_SIZE);
 31a:	86 e8       	ldi	r24, 0x86	; 134
 31c:	80 bd       	out	0x20, r24	; 32
SetBit(UCSRB,2);
 31e:	52 9a       	sbi	0x0a, 2	; 10
#endif // USART_CHAR_SIZE*/


		  /***************SET DOUBLE SPEED******/
           #if (USART_SPEED_MODE== USART_DOUBLE_SPEED)
		    SetBit(UCSRA,U2X);
 320:	59 9a       	sbi	0x0b, 1	; 11
            #endif // USART_DOUBLE_SPEED
/*
            /**************** Set Parity Bit***************/
		UCSRC |= (1<<URSEL) | USART_PARITY_MODE;
 322:	80 b5       	in	r24, 0x20	; 32
 324:	80 68       	ori	r24, 0x80	; 128
 326:	80 bd       	out	0x20, r24	; 32
		/**************** Set SYNCH ASYNCH***************/
	UCSRC |= (1<<URSEL) | USART_SYNCH_MODE;
 328:	80 b5       	in	r24, 0x20	; 32
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 bd       	out	0x20, r24	; 32
		/**************** Set Stop Bit***************/
	UCSRC |= (1<<URSEL) | USART_STOPBIT;
 32e:	80 b5       	in	r24, 0x20	; 32
 330:	80 68       	ori	r24, 0x80	; 128
 332:	80 bd       	out	0x20, r24	; 32
		/***************RECIEVER INT ENABLE**********/
	UCSRB |= USART_RECIEVE_INT;
 334:	8a b1       	in	r24, 0x0a	; 10
 336:	8a b9       	out	0x0a, r24	; 10
		/***************TRANSMITER INT ENABLE**********/
	UCSRB |= USART_TRANSMITER_INT;
 338:	8a b1       	in	r24, 0x0a	; 10
 33a:	8a b9       	out	0x0a, r24	; 10
 33c:	08 95       	ret

0000033e <USART_FUN_TRANSMIT>:
* Prerequisite: USART Init
* Return: None
 ***********************************************/
    void USART_FUN_TRANSMIT(u16 data)
    {	/*//Wait for the UDR to be empty*/
        while(!(UCSRA&(1<<UDRE)));
 33e:	5d 9b       	sbis	0x0b, 5	; 11
 340:	fe cf       	rjmp	.-4      	; 0x33e <USART_FUN_TRANSMIT>
		 /*****IF THE DATA TRANSMIITED IN 9 BITS MODE SO WE WRITE
        THE MOST BIT FRIST IN THIER PLACE UCSRB***/
        #ifdef USART_CHAR_SIZE==USART_9_Bit_CHAR
        UCSRB|=GetBit(data,8);//THE TXB8 in the frist bit in UCSRB so Getbit wil get single bit only in the frist 
 342:	2a b1       	in	r18, 0x0a	; 10
 344:	91 70       	andi	r25, 0x01	; 1
 346:	92 2b       	or	r25, r18
 348:	9a b9       	out	0x0a, r25	; 10
		#endif
		//Put the data the lower 8 bits in UDR	
		
     
	 
	   UDR=(u8)data;
 34a:	8c b9       	out	0x0c, r24	; 12
 34c:	08 95       	ret

0000034e <USART_FUN_Receive>:
{
/*	u8 Parity_Error=error;
	*Ptr_To_Val=0; 
	
	/*Wait for data to be received*/
	while(!(UCSRA&(1<<RXC)));
 34e:	5f 9b       	sbis	0x0b, 7	; 11
 350:	fe cf       	rjmp	.-4      	; 0x34e <USART_FUN_Receive>
	return UDR;
 352:	8c b1       	in	r24, 0x0c	; 12

	}
	return Parity_Error;
	*/
	
}
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
